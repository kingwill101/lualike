---
description:
globs:
alwaysApply: false
---
# Lualike Documentation Guide

When you are asked to write or update documentation for the `lualike` language, you must follow these guidelines.

## Principles

- **High-Level Focus:** All documentation should be written from the perspective of a user of the `lualike` language. Focus on what the user can do, not how the interpreter does it.
- **Conciseness:** Use short descriptions and get to the point quickly. Elaborate only when a feature is complex or has non-obvious behavior.
- **No Implementation Details:** Never mention the underlying Dart implementation. Do not refer to filenames, class names, or internal architectural details.
- **No Full Source Code:** Do not include the full source code of any file in the documentation.

## Content Guidelines

- **Lua Examples:** You may and should use small, self-contained Lua code snippets to illustrate language features and library functions.
- **Structure:** Organize documentation into clear sections with headings.

## Language Philosophy: `lualike` vs. Lua

It is important to frame the documentation with the correct philosophy.

- **"Lualike", not Lua:** The language is named `lualike` for a reason. While the goal is to support much of the standard Lua syntax and standard library, there is no guarantee of a 1-to-1 correspondence.
- **Divergence is Intentional:** There will be cases where `lualike` intentionally diverges from the standard Lua implementation. This could be to provide a "better" or more modern alternative to a feature.
- **Example - Threads vs. Coroutines:** `lualike` supports threads for concurrency. However, it does not implement any part of Lua's standard `coroutine` library, even though standard Lua threads are coroutines. This is a deliberate design choice.

When documenting, always refer to the language as `lualike`. When discussing a feature that exists in standard Lua, it's okay to reference it for context, but the focus must be on how it behaves in `lualike`.

---

### Good Example

**Title:** `string.len`

The `string.len` function returns the number of characters in a string.

```lua
local s = "hello"
local length = string.len(s)
-- length is 5
```

### Bad Example

**Title:** `string.len` Implementation

The `string.len` function is implemented in `lib_string.dart`. It calls the `.length` property on the raw string inside the `Value` object.

```dart
// ... dart implementation code ...
```
